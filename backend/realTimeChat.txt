chat-app/
â”œâ”€â”€ backend/
â”‚   â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ routes/
â”‚   â”œâ”€â”€ sockets/
â”‚   â”œâ”€â”€ config/
â”‚   â”œâ”€â”€ server.js
â”œâ”€â”€ frontend/
â”‚   â”œâ”€â”€ public/
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ App.js
â”‚   â”‚   â”œâ”€â”€ index.js
ðŸ”§ Backend Setup (backend/)
1. Initialize the backend
bash
Copy
Edit
mkdir backend && cd backend
npm init -y
npm install express socket.io mysql2 sequelize cors dotenv
2. Create .env
env
Copy
Edit
DB_NAME=chatdb
DB_USER=root
DB_PASS=yourpassword
DB_HOST=localhost
PORT=5000
3. Sequelize Setup (config/database.js)
js
Copy
Edit
const { Sequelize } = require('sequelize');
require('dotenv').config();

const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASS,
  {
    host: process.env.DB_HOST,
    dialect: 'mysql',
    logging: false,
  }
);

module.exports = sequelize;
4. Models (models/User.js, models/Message.js)
js
Copy
Edit
// models/User.js
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');

const User = sequelize.define('User', {
  username: {
    type: DataTypes.STRING,
    unique: true,
    allowNull: false
  }
});

module.exports = User;
js
Copy
Edit
// models/Message.js
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');
const User = require('./User');

const Message = sequelize.define('Message', {
  content: {
    type: DataTypes.STRING,
    allowNull: false,
  }
});

User.hasMany(Message);
Message.belongsTo(User);

module.exports = Message;
5. Socket.IO & Express Server (server.js)
js
Copy
Edit
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');
const sequelize = require('./config/database');
const User = require('./models/User');
const Message = require('./models/Message');

require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: '*'
  }
});

app.use(cors());
app.use(express.json());

io.on('connection', (socket) => {
  console.log('User connected:', socket.id);

  socket.on('send_message', async (data) => {
    const { username, content } = data;
    let user = await User.findOne({ where: { username } });

    if (!user) {
      user = await User.create({ username });
    }

    const message = await Message.create({ content, UserId: user.id });

    io.emit('receive_message', {
      username: user.username,
      content: message.content,
      createdAt: message.createdAt
    });
  });

  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

// Sync DB and start server
(async () => {
  try {
    await sequelize.sync({ alter: true });
    server.listen(process.env.PORT, () => {
      console.log(`Server running on port ${process.env.PORT}`);
    });
  } catch (err) {
    console.error('Error starting server:', err);
  }
})();
ðŸ’» Frontend Setup (frontend/)
1. Initialize React App
bash
Copy
Edit
npx create-react-app frontend
cd frontend
npm install socket.io-client
2. Chat Component (components/Chat.js)
jsx
Copy
Edit
import React, { useEffect, useState } from 'react';
import io from 'socket.io-client';

const socket = io('http://localhost:5000');

const Chat = () => {
  const [username, setUsername] = useState('');
  const [content, setContent] = useState('');
  const [messages, setMessages] = useState([]);

  useEffect(() => {
    socket.on('receive_message', (data) => {
      setMessages((prev) => [...prev, data]);
    });

    return () => {
      socket.off('receive_message');
    };
  }, []);

  const sendMessage = () => {
    if (username && content) {
      socket.emit('send_message', { username, content });
      setContent('');
    }
  };

  return (
    <div>
      <h2>Real-time Chat</h2>
      <input
        type="text"
        placeholder="Username"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />
      <br />
      <input
        type="text"
        placeholder="Message"
        value={content}
        onChange={(e) => setContent(e.target.value)}
      />
      <button onClick={sendMessage}>Send</button>

      <div>
        <h3>Messages:</h3>
        {messages.map((msg, i) => (
          <div key={i}>
            <strong>{msg.username}</strong>: {msg.content}
          </div>
        ))}
      </div>
    </div>
  );
};

export default Chat;
3. Use in App
jsx
Copy
Edit
// src/App.js
import React from 'react';
import Chat from './components/Chat';

function App() {
  return (
    <div className="App">
      <Chat />
    </div>
  );
}

export default App;
ðŸ§ª Testing the App
Start MySQL server

Run backend:

bash
Copy
Edit
node backend/server.js
Run frontend:

bash
Copy
Edit
npm start
Open multiple tabs and test real-time messaging.

